
import numpy as np
from copy import deepcopy
import matplotlib.pyplot as plt
import time
from config2 import Config
import copy



## Plot Time
# run_num = list(range(1,6))
#
# # Putty Modded
# times = [697.164598941803, 653.7343730926514, 662.7666671276093, 764.4032883644104, 656.8312411308289]
# times = [round(i/60) for i in times]
#
# #Putty Unmodded
# times2 = [643.0565884113312, 645.4355955123901, 644.5277850627899, 741.2486824989319, 651.4311311244965]
# times2 = [round(i/60) for i in times2]
# plt.plot(run_num,times)
# plt.plot(run_num, times2, '-o')
# plt.title('Minutes Per Run',fontsize = 16)
# plt.xlabel('Run Number',fontsize = 16)
# plt.ylabel('Time In Minutes', fontsize = 16)
# plt.legend(['Population Modified GA','Unmodified GA'],prop={'size': 14})
# plt.grid(True, which = 'Both')
# plt.show()

## Plot Convergence Curve


## Plot Number of Decaps for Convergence Curve

def get_decap_number(conv_curve, num_caps):
    holder = conv_curve.copy()

    for i in range(len(holder)):
        if holder[i] > 0:
            holder[i] = num_caps
        elif holder[i] < 0:
            holder[i] = num_caps + holder[i] + 1
    return holder

def get_decap_number2(conv_curve, num_caps):
    holder = conv_curve.copy()
    prev_sol = False

    for i in range(len(holder)):
        if holder[i] > 0:
            if not prev_sol:
                holder[i] = num_caps
            else:
                holder[i] = prev_sol
        elif holder[i] < 0:
            prev_sol = num_caps + holder[i] + 1
            holder[i] = num_caps + holder[i] + 1
    return holder

# run1 = [-21.0, -21.0, -21.0, -22.0, -22.0, -23.0, -24.0, -24.0, -24.0, -24.0, -24.0, -24.0, -24.0, -24.0, -24.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0]
# run2 = [-21.0, -21.0, -21.0, -22.0, -23.0, -24.0, -24.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0]
# run3 = [-21.0, -21.0, -22.0, -23.0, -23.0, -24.0, -24.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0]
# run4 = [-21.0, -21.0, -21.0, -21.0, -22.0, -23.0, -24.0, -24.0, -24.0, -24.0, -24.0, -24.0, -24.0, -24.0, -25.0, -25.0, -25.0, -25.0, -25.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -27.0, -27.0, -27.0, -27.0, -27.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0, -28.0]
# run5 = [-21.0, -21.0, -22.0, -23.0, -23.0, -24.0, -24.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0, -26.0]

run1 = [-39, -39, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43]
run2 = [-37, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -41, -42, -42, -42, -42, -42, -42, -42, -42, -42, -42]
run3 = [-31, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -41]
run4 = [-28, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -31, -33, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -35, -39, -39, -39, -39, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40]
run5 = [-36, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -38, -40, -40, -40, -41, -41, -43, -43, -43, -43, -43, -43, -43, -43, -43, -43, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44, -44]
#run1 = [-17, -24, -24, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -27, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -28, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29, -29]
#run1 = [-1.0, -3.0, -3.0, -3.0, -5.0, -5.0, -5.0, -7.0, -7.0, -9.0, -9.0, -9.0, -11.0, -11.0, -12.0, -14.0, -14.0, -15.0, -15.0, -15.0, -15.0, -16.0, -16.0, -17.0, -18.0, -18.0, -19.0, -20.0, -20.0, -21.0, -21.0, -21.0, -21.0, -21.0, -22.0, -23.0, -23.0, -23.0, -23.0, -23.0, -23.0, -23.0, -23.0, -23.0, -23.0, -23.0, -24.0, -24.0, -24.0, -24.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -26.0, -26.0, -26.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0, -27.0]
#run2 = [0.014176631833515701, 0.001439070720450399, 7.930109380060004e-05, 7.930109380060004e-05, 7.930109380060004e-05, -2.0, -8.0, -8.0, -9.0, -9.0, -9.0, -9.0, -10.0, -10.0, -10.0, -10.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -13.0, -13.0, -13.0, -13.0, -13.0, -13.0, -14.0, -14.0, -14.0, -14.0, -14.0, -14.0, -14.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -16.0, -16.0, -16.0, -16.0]
#run2 = [-8.0, -8.0, -8.0, -8.0, -9.0, -9.0, -9.0, -11.0, -11.0, -11.0, -11.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -13.0, -13.0, -13.0, -13.0, -14.0, -15.0, -16.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -17.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -18.0, -19.0, -19.0, -19.0, -19.0, -19.0, -19.0, -19.0]
#run5 = [0.002044600705241182, 0.0018914091254650844, 0.001843452093152562, 0.0018158680571666562, 0.0015555373101164413, 0.001544513473607105, 0.0008339074173681381, 0.0006985474422277353, 0.0005367399163234105, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -21, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25, -25]
#run3 = [-(18)] * 51
#run4 = [-(24)] * 51
print(50 + run3[0] + 1)
print(50 + 1 + run4[0])
del run1[0]
del run2[0]
del run3[0]
del run4[0]
del run5[0]

n = 75
run1 = get_decap_number2(run1,n)
run2 = get_decap_number2(run2,n)
run3 = get_decap_number2(run3,n)
run4 = get_decap_number2(run4,n)
run5 = get_decap_number2(run5,n)


iterations = list(range(1,len(run1)+1))
iterations2 = list(range(1,len(run2)+1))

plt.plot(iterations,run1, linewidth = 5)
plt.plot(iterations2,run2, '-o',linewidth = 5)
plt.plot(iterations,run3, '--',linewidth = 5, c = 'r')
plt.plot(iterations2,run4, '-.',linewidth = 5)
plt.plot(iterations,run5, ':',linewidth = 5)
plt.title('Convergence Curve of Augmented GA, 75 Port Case, Using Distribution of a Known Best Solution',fontsize = 20)
plt.xlabel('Generation #',fontsize = 24)
plt.ylabel('# Of Capacitors', fontsize = 24)
plt.legend(['Run 1', 'Run 2', 'Run 3', 'Run 4', 'Run 5'],prop={'size': 18}, loc = 'upper right')
# plt.legend(['Current State of GA, 50 Iterations, 50 Pop. Size',
#             'Open Source GA, 50 Iterations, 50 Pop. Size', 'Ideal Solution of an Iterative Method',
#             'Best Solution from a Reinforcement Learning Method'],
#            prop={'size': 18}, loc = 'upper right')
#plt.legend([ 'Run 1',"Run 2",'Run 3', 'Run 4', 'Run 5'],prop={'size': 18}, loc = 'upper right')
#plt.legend([ 'With Brute Force Check', 'Without Brute Force Check'],prop={'size': 18})
plt.grid(True, which = 'Both')
ax = plt.gca()
ax.tick_params(axis="x", labelsize=22)
ax.tick_params(axis="y", labelsize=22)
fig = plt.gcf()
fig.set_size_inches((12, 9), forward=False)
#plt.savefig('Capacitor Convergence Curve', bbox_inches='tight')
plt.show()

